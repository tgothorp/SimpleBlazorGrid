@page "/"
@using SimpleBlazorGrid.Sandbox.Data
@using SimpleBlazorGrid.Enums
@using SimpleBlazorGrid.DataSource

@inject ProductRepo ProductRepo

<PageTitle>Another Blazor DataGrid</PageTitle>

<div style="width: 100%">
    <SimpleGrid TType="Product" DataSource="@(new DataGridEnumerableSource<Product>(Products))">
        <SimpleColumn TType="Product" Property="@(nameof(Product.Id))"/>
        <SimpleColumn TType="Product" Property="@(nameof(Product.Name))" Sortable="@true"/>
        <SimpleColumn TType="Product" Property="@(nameof(Product.CostInGbp))" Heading="Price (GBP)" Format="Format.Money" Sortable="@true"/>
        <SimpleColumn TType="Product" Property="@(nameof(Product.CostInLocalCurrency))" Heading="Price">
            <SimpleColumnTemplate Context="item">
                @switch (item.LocalCurrency)
                {
                    case Currency.GBP:
                        <i>£@item.CostInLocalCurrency.ToString("n2")</i>
                        break;
                    case Currency.USD:
                        <i>$@item.CostInLocalCurrency.ToString("n2")</i>
                        break;
                    case Currency.EUR:
                        <i>€@item.CostInLocalCurrency.ToString("n2")</i>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </SimpleColumnTemplate>
        </SimpleColumn>
        <SimpleColumn TType="Product" Property="@nameof(Product.Manufacturer)" />
        <SimpleColumn TType="Product" Property="@nameof(Product.LastOrderedOn)" Heading="Last Ordered" Format="Format.ShortDate" Sortable="@true" />
    </SimpleGrid>
</div>

@code {

    private List<Product> Products { get; set; } = new();

    protected override void OnParametersSet()
    {
        Products = ProductRepo.GetAllProducts();
    }

}