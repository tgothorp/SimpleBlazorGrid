@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@typeparam TType

@using SimpleBlazorGrid.Options

<div class="simpleDG_footer">
    <div>
        <small>Displaying Page: @(PageOptions.CurrentPage + 1) of @PageOptions.MaxPage (@PageOptions.TotalItemCount total records)</small>
    </div>

    @if (SimpleGrid.PageOptions != null)
    {
        <div class="simpleDg_footer_paging">
            @* First page shortcut *@
            <DataGridPagingControl PageIndex="0" Selected="@(SimpleGrid.PageOptions.CurrentPage == 0)" Glyph="F" OnChangePage="PageChanged"/>

            @foreach (var page in Pages())
            {
                <DataGridPagingControl PageIndex="page" Selected="@(page == SimpleGrid.PageOptions.CurrentPage)" OnChangePage="PageChanged"/>
            }

            @* Last page shortcut *@
            <DataGridPagingControl PageIndex="@(SimpleGrid.PageOptions.MaxPage - 1)" Selected="@(SimpleGrid.PageOptions.CurrentPage == SimpleGrid.PageOptions.MaxPage - 1)" Glyph="L" OnChangePage="PageChanged"/>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public SimpleGrid<TType> SimpleGrid { get; set; }

    [Parameter]
    public PageOptions PageOptions { get; set; }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    private List<int> Pages()
    {
        var result = new List<int>();

        if (SimpleGrid.PageOptions.CurrentPage > 0)
        {
            // Add previous page if we are not on the first page
            result.Add(SimpleGrid.PageOptions.CurrentPage - 1);
        }

        // Add the curent page
        result.Add(SimpleGrid.PageOptions.CurrentPage);

        // Add the next page where possible
        if (SimpleGrid.PageOptions.CurrentPage < SimpleGrid.PageOptions.MaxPage - 1)
        {
            result.Add(SimpleGrid.PageOptions.CurrentPage + 1);
        }

        return result;
    }

    private async Task ChangePage(int newPage)
    {
        await PageChanged.InvokeAsync(newPage);
    }
}