@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using SimpleBlazorGrid.Interfaces
@using SimpleBlazorGrid.Options

@typeparam TType

<th class="@(Column.Sortable ? "simpleDG_sortable" : "")" @onclick="Sort">

    <div style="display: flex; flex-direction: row; justify-content: space-between;">

        @* TODO - Figure out how to position the filter icon properly *@
        @if (Filter is not null)
        {
            <div class="simpleDG_filter_icon" @onclick="@(async () => await ShowFilter.InvokeAsync(Filter))">
                <DataGridFilterGlyph/>
            </div>
        }

        <div style="width: @(CalculateHeadingWidth())%">
            @Column.Heading
        </div>

        @if (Column.Sortable)
        {
            <div style="width: 15%">
                <DataGridSortGlyph Ascending="SortAscending" Active="@(Column.Property == SortOptions.Property)"/>
            </div>
        }
    </div>
</th>

@code {

    [CascadingParameter]
    public IDataGrid<TType> SimpleGrid { get; set; }

    [Parameter]
    public IColumn<TType> Column { get; set; }

    [Parameter]
    public SortOptions SortOptions { get; set; }

    [Parameter]
    public bool SortAscending { get; set; }

    [Parameter]
    public IFilter<TType> Filter { get; set; }

    [Parameter]
    public EventCallback<IFilter<TType>> ShowFilter { get; set; }

    private void Sort()
    {
        if (!Column.Sortable)
            return;

        SimpleGrid.Sort(Column.Property, SortAscending);
    }

    private int CalculateHeadingWidth()
    {
        if (Filter is not null && Column.Sortable)
            return 70;

        if (Filter is not null || Column.Sortable)
            return 85;

        return 100;
    }

}