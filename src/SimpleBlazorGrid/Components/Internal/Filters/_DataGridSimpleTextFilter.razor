@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid.Internal.Filters

@using SimpleBlazorGrid.Options.Filters

@typeparam TType

<div style="width: 50%; left: 25%; top: 25%; position: relative">
    <h2 style="width: 100%; margin-bottom: 1rem">Filter by @Filter.Property</h2>
    <input style="width: 100%" type="text" @bind-value="StringEqualFilterOption.Value" placeholder="@Filter.Property"/>
    <div style="width: 100%; display: flex; flex-direction: row; justify-content: space-evenly;">
        <div style="width: 50%">
            <button style="width: 96%; margin: 2%" @onclick="ClearFilter">Clear</button>
        </div>
        <div style="width: 50%">
            <button style="width: 96%; margin: 2%" @onclick="ApplyFilter">Apply Filter</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public SimpleFilter<TType> Filter { get; set; }
    
    [Parameter]
    public StringEqualFilterOption StringEqualFilterOption { get; set; }
    
    [Parameter]
    public EventCallback<FilterOption> OnFilterChanged { get; set; }
    
    [Parameter]
    public EventCallback<FilterOption> OnFilterRemoved { get; set; }

    private async Task ApplyFilter()
    {
        if (string.IsNullOrEmpty(StringEqualFilterOption.Value))
        {
            await OnFilterRemoved.InvokeAsync(StringEqualFilterOption);
            return;
        }

        await OnFilterChanged.InvokeAsync(StringEqualFilterOption);
    }

    private async Task ClearFilter()
    {
        StringEqualFilterOption.Value = null;
        await OnFilterRemoved.InvokeAsync(StringEqualFilterOption);
    }

}