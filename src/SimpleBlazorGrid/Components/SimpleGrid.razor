@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using SimpleBlazorGrid.Interfaces
@using SimpleBlazorGrid.Configuration
@using SimpleBlazorGrid.Helpers
@using SimpleBlazorGrid.Options

@implements IDataGrid<TType>

@inject SimpleDataGridConfiguration Configuration

@typeparam TType

<CascadingValue Value="this">
    @ChildContent

    @if (DataGridColumns.Any())
    {
        <div>
            <table class="simpleDG" style="--simple-bg-primary: @Configuration.PrimaryColour; --simple-bg-secondary: @Configuration.SecondaryColour">
                <thead>
                <tr>
                    @if (Selectable)
                    {
                        <th class="simpleDG_selectable">
                            <input type="checkbox" @onchange="@(e => OnSelectAll((bool)e.Value!))" checked=@EverythingSelected />
                        </th>
                    }
                    
                    @foreach (var column in DataGridColumns)
                    {
                        if (column.Sortable)
                        {
                            <th class="simpleDG_sortable" @onclick="@(() => OnSort(column.Property, SortAscending))">
                                @column.Heading
                            </th>
                        }
                        else
                        {
                            <th>
                                @column.Heading
                            </th>
                        }
                    }
                </tr>
                </thead>
                <tbody>
                @if (Items.Any())
                {
                    @foreach (var item in Items)
                    {
                        var selected = SelectedItems.Contains(item);
                        <DataGridRow TType="TType" Selectable="@Selectable" Data="item" Columns="DataGridColumns" OnSelected="OnItemSelected" Selected="selected"/>
                    }
                }
                </tbody>
                <tfoot>
                <tr>
                    <td colspan="@DataGridColumns.Count">
                        <div style="display: flex">
                            <DataGridPagingControls PageOptions="DataSource.PageOptions" PageChanged="OnPageChanged"/>
                        </div>
                    </td>
                </tr>
                </tfoot>
            </table>
        </div>
    }
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public IDataGridSource<TType> DataSource { get; set; }

    [Parameter]
    public int ItemsPerPage { get; set; } = 5;

    [Parameter]
    public bool Selectable { get; set; }

    [Parameter]
    public EventCallback<List<TType>> OnSelectionChanged { get; set; }
    
    // Table Data
    private TType[] Items { get; set; } = {};
    private List<IColumn<TType>> DataGridColumns { get; set; } = new();

    // Filtering etc
    public PageOptions PageOptions { get; set; } = new();
    public SortOptions SortOptions { get; set; } = new();
    
    // UI & internal junk
    private List<TType> SelectedItems { get; set; } = new();
    private bool SortAscending { get; set; } = true;
    private bool EverythingSelected { get; set; } = false;

    public List<TType> GetSelectedItems()
    {
        return SelectedItems;
    }

    protected override void OnParametersSet()
    {
        PageOptions.ItemsPerPage = ItemsPerPage;
        ReloadTable();
        
        base.OnParametersSet();
    }

    public void AddColumn(IColumn<TType> column)
    {
        DataGridColumns.Add(column);
        StateHasChanged();
    }

    private void OnPageChanged(int newPage)
    {
        PageOptions.CurrentPage = newPage;
        
        SelectedItems = new List<TType>();
        EverythingSelected = false;
        OnSelectionChanged.InvokeAsync(SelectedItems);

        ReloadTable();
    }

    private void OnSort(string property, bool ascending)
    {
        SortOptions.Property = property;
        SortOptions.Ascending = ascending;
        SortAscending = !SortAscending;

        // Go back to the first page when sorting
        PageOptions.CurrentPage = 0;

        SelectedItems = new List<TType>();
        EverythingSelected = false;
        OnSelectionChanged.InvokeAsync(SelectedItems);

        ReloadTable();
    }

    private void OnSelectAll(bool selectAll)
    {
        SelectedItems = selectAll
            ? DataSource.Items().ToList()
            : new List<TType>();

        if (SelectedItems.Any())
            EverythingSelected = true;

        OnSelectionChanged.InvokeAsync(SelectedItems);
    }

    private void OnItemSelected(TType item)
    {
        if (SelectedItems.Contains(item))
            SelectedItems.Remove(item);
        else
            SelectedItems.Add(item);
        
        OnSelectionChanged.InvokeAsync(SelectedItems);
    }

    private void ReloadTable()
    {
        DataSource.SortOptions = SortOptions;
        DataSource.PageOptions = PageOptions;

        Items = DataSource.Items();
        StateHasChanged();
    }
}