@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using System.Linq.Expressions
@using SimpleBlazorGrid.Extensions

@typeparam TType;
@typeparam TEnum where TEnum : Enum;

@inherits SimpleBlazorGrid.Filters.EnumFilter<TType>

@if (ShouldShowFilter)
{
    <div class="sdg-filter">
        <div class="sdg-filter-container">
            <h2>Filter by @HeadingName</h2>

            @if (AllowMultiple)
            {
                <div>
                    @if (SelectedValues.Any())
                    {
                        <p>Selected Values:</p>
                    }
                    <div class="sdg-filter-enum">
                        @foreach (var selectedValue in SelectedValues)
                        {
                            <div class="item">
                                <div class="value">
                                    @selectedValue
                                </div>
                                <div class="value-remove" @onclick="@(() => RemoveSelectedValue(selectedValue))">
                                    X
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="sdg-filter-inputs">
                    <select @onchange="SelectionChangedMultiple">
                        <option disabled selected>Select @PropertyName ...</option>
                        @foreach (var item in PermittedValues)
                        {
                            <option value="@item">@item.ToString()</option>
                        }
                    </select>
                </div>
            }
            else
            {
                <div class="sdg-filter-inputs">
                    <select @onchange="SelectionChangedSingle">
                        <option disabled selected>Select @PropertyName ...</option>
                        @foreach (var item in PermittedValues)
                        {
                            if (SelectedValues.FirstOrDefault() == item.ToString())
                            {
                                <option selected value="@item">@item.ToString()</option>
                            }
                            else
                            {
                                <option value="@item">@item.ToString()</option>
                            }
                        }
                    </select>
                </div>
            }

            <div class="sdg-filter-buttons">
                <div class="clear">
                    <button @onclick="Clear">Clear</button>
                </div>
                <div class="apply">
                    <button @onclick="Apply">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Allows for only certain enum values to be allowed to be selected, if not set then all enum values are eligible
    /// </summary>
    [Parameter]
    public List<TEnum> PermittedValues { get; set; } = new();

    /// <summary>
    /// If set, the filter will be enabled when the table loads with the provided values
    /// </summary>
    [Parameter]
    public List<TEnum> DefaultValues { get; set; } = new();

    /// <summary>
    /// Allows for multiple or single values to be selected, default: false
    /// </summary>
    [Parameter]
    public override bool AllowMultiple { get; set; }

    public override List<string> SelectedValues { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        EnumType = typeof(TEnum);

        if (PermittedValues == null || !PermittedValues.Any())
        {
            var values = Enum.GetValues(typeof(TEnum));
            PermittedValues = values.Cast<TEnum>().ToList();
        }

        if (DefaultValues.Any())
        {
            SelectedValues = DefaultValues.Select(x => x.ToString()).ToList();
            await Apply();
        }

        await base.OnInitializedAsync();
    }

    protected override Task Clear()
    {
        SelectedValues = new List<string>();
        return base.Clear();
    }

    private void SelectionChangedMultiple(ChangeEventArgs obj)
    {
        if (obj.Value is string selectedValue && !SelectedValues.Contains(selectedValue))
        {
            SelectedValues.Add(selectedValue);
        }
    }

    private void SelectionChangedSingle(ChangeEventArgs obj)
    {
        if (obj.Value is string selectedValue)
        {
            SelectedValues = new List<string> { selectedValue };
        }
        else
        {
            SelectedValues = null;
        }
    }

    private void RemoveSelectedValue(string selectedValue)
    {
        SelectedValues.Remove(selectedValue);
    }

}