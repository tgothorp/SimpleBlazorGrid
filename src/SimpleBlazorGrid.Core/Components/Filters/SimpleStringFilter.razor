@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using System.Linq.Expressions
@using SimpleBlazorGrid.Extensions
@using SimpleBlazorGrid.Interfaces

@typeparam TType;

@inherits SimpleBlazorGrid.Filters.Filter<TType>

@if (ShouldShowFilter)
{
    <div class="simpleDG_filters">
        <div style="width: 50%; left: 25%; top: 25%; position: relative">
            <h2 style="width: 100%; margin-bottom: 1rem">Filter by @PropertyName</h2>
            <input style="width: 100%; height: 35px; border-radius: 5px; border: none; margin-bottom: 1rem" type="text" @bind-value="Value" placeholder="@PropertyName"/>
            <div style="width: 100%; display: flex; flex-direction: row; justify-content: space-evenly;">
                <div style="width: 50%">
                    <button style="width: 96%; margin: 2%; height: 35px; border-radius: 5px; background-color: #FF0A54; color: #FFF; border: solid 2px #FF0A54" @onclick="Clear">Clear</button>
                </div>
                <div style="width: 50%">
                    <button style="width: 96%; margin: 2%; height: 35px; border-radius: 5px; background-color: #FF0A54; color: #FFF; border: solid 2px #FF0A54" @onclick="Apply">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public bool IgnoreCase { get; set; }

    [Parameter]
    public string DefaultValue { get; set; }

    public string Value { get; set; }

    protected override void OnInitialized()
    {
        Id = Guid.NewGuid();
        Value = DefaultValue;
        DataGrid.AddSimpleFilter(this);

    // TODO: Validate that this filter can be applied to the target property (types match etc.)

        base.OnInitialized();
    }

    public override Expression<Func<TType, bool>> ApplyFilter()
    {
        var parameterExpression = Expression.Parameter(typeof(TType), "x");

        Expression propertyAccess = parameterExpression;
        foreach (var property in PropertyName.Split('.'))
        {
            propertyAccess = Expression.Property(propertyAccess, property);
        }

        var value = Expression.Constant(Value, typeof(string));

    // TODO case-sensitive comparison (Use .ToLower for EF compatability) 

        var equality = Expression.Equal(propertyAccess, value);
        var lambda = Expression.Lambda<Func<TType, bool>>(equality, parameterExpression);

        return lambda;
    }

    protected override Task Apply()
    {
        return Value.IsNotNullOrEmpty()
            ? base.Apply()
            : Clear();
    }

}