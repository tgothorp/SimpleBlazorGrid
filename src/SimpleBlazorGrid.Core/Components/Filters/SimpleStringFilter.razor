@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using System.Linq.Expressions
@using SimpleBlazorGrid.Exceptions
@using SimpleBlazorGrid.Extensions
@using System.Diagnostics

@typeparam TType;

@inherits SimpleBlazorGrid.Filters.Filter<TType>

@if (ShouldShowFilter)
{
    <div class="sdg-filter">
        <div class="sdg-filter-container">
            <h2>Filter by @HeadingName</h2>
            <div class="sdg-filter-inputs">
                <input type="text" @bind-value="Value" placeholder="@HeadingName"/>
            </div>
            <div class="sdg-filter-buttons">
                <div class="clear">
                    <button @onclick="Clear">Clear</button>
                </div>
                <div class="apply">
                    <button @onclick="Apply">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    /// <summary>
    /// Should the case of the query string and property matter?
    /// </summary>
    /// <remarks>
    /// Default: false
    /// </remarks>
    [Parameter]
    public bool IgnoreCase { get; set; }

    /// <summary>
    /// If set, the filter will be enabled when the table loads with the value provided here.
    /// </summary>
    [Parameter]
    public string DefaultValue { get; set; }

    /// <summary>
    /// By default this filter will try to match a string exactly (eg. MyProperty == "Query"), setting this to false
    /// will check to see if query appears as a substring in the target property.
    /// </summary>
    /// <remarks>
    /// Setting this to 'false' may have an adverse effect on performance if used on large data sets, consider using the search feature instead, Default: true
    /// </remarks>
    [Parameter]
    public bool Exact { get; set; } = true;

    public string Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PropertyType != typeof(string))
            throw new SimpleGridException($"Cannot apply string filter to property '{typeof(TType)}.{PropertyName}' as is not a string!");

        if (DefaultValue.IsNotNullOrEmpty())
        {
            Value = DefaultValue;
            DefaultValue = null;

            await Apply();
        }

        await base.OnInitializedAsync();
    }

    protected override Task Apply()
    {
        return Value.IsNotNullOrEmpty()
            ? base.Apply()
            : Clear();
    }

    protected override async Task Clear()
    {
        Value = null;
        await base.Clear();
    }
}