@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using System.Linq.Expressions
@using SimpleBlazorGrid.Exceptions
@using SimpleBlazorGrid.Extensions

@typeparam TType;

@inherits SimpleBlazorGrid.Filters.Filter<TType>

@if (ShouldShowFilter)
{
    <div class="sdg-filter">
        <div class="sdg-filter-container">
            <h2>Filter by @HeadingName</h2>
            <div class="sdg-filter-inputs">
                <input type="number" min="@Min" max="@Max" step="@Step" @bind-value="Value" placeholder="@HeadingName"/>
            </div>
            <div class="sdg-filter-buttons">
                <div class="clear">
                    <button @onclick="Clear">Clear</button>
                </div>
                <div class="apply">
                    <button @onclick="Apply">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    /// <summary>
    /// If set, the filter will be enabled when the table loads with this value as the filter value 
    /// </summary>
    [Parameter]
    public string DefaultValue { get; set; }
    
    /// <summary>
    /// Sets the 'min' value on the inputs
    /// </summary>
    [Parameter]
    public string Min { get; set; }

    /// <summary>
    /// Sets the 'max' value on the inputs
    /// </summary>
    [Parameter]
    public string Max { get; set; }

    /// <summary>
    /// /// Sets the 'step' value on the inputs (eg. 0.01)
    /// </summary>
    [Parameter]
    public string Step { get; set; }

    public string Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!PropertyType.IsNumericType())
            throw new SimpleGridException($"Cannot apply numeric filter to property '{typeof(TType)}.{PropertyName}' as is not a numeric type!");

        if (DefaultValue.IsNotNullOrEmpty())
        {
            Value = DefaultValue;
            DefaultValue = null;

            await Apply();
        }
        
        base.OnInitialized();
    }

    protected override Task Apply()
    {
        return Value.IsNotNullOrEmpty()
            ? base.Apply()
            : Clear();
    }

    protected override Task Clear()
    {
        Value = null;
        return base.Clear();
    }
}