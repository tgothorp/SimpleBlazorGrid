@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using System.Linq.Expressions
@using SimpleBlazorGrid.Extensions

@typeparam TType;

@inherits SimpleBlazorGrid.Filters.Filter<TType>

@if (ShouldShowFilter)
{
    <div class="sdg-filter">
        <div class="sdg-filter-container">
            <h2>Filter by @HeadingName</h2>
            <div class="sdg-filter-inputs">
                <div>
                    <label>
                        <small>Minimum</small>
                    </label>
                    <input type="number" min="@Min" max="@Max" step="@Step" @bind-value="LowValue" placeholder="Minimum @HeadingName"/>
                </div>
                <div>
                    <label>
                        <small>Maximum</small>
                    </label>
                    <input type="number" min="@Min" max="@Max" step="@Step" @bind-value="HighValue" placeholder="Maximum @HeadingName"/>
                </div>
            </div>
            <div class="sdg-filter-buttons">
                <div class="clear">
                    <button @onclick="Clear">Clear</button>
                </div>
                <div class="apply">
                    <button @onclick="Apply">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public string DefaultValue { get; set; }

    [Parameter]
    public string Min { get; set; }

    [Parameter]
    public string Max { get; set; }

    [Parameter]
    public string Step { get; set; }

    public string LowValue { get; set; } = null;
    public string HighValue { get; set; } = null;

    protected override Task Apply()
    {
        return LowValue.IsNotNullOrEmpty() && HighValue.IsNotNullOrEmpty()
            ? base.Apply()
            : Clear();
    }

    protected override Task Clear()
    {
        LowValue = null;
        HighValue = null;

        return base.Clear();
    }
}