@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@typeparam TType;

@using SimpleBlazorGrid.Extensions
@using SimpleBlazorGrid.Exceptions
@inherits SimpleBlazorGrid.Filters.Filter<TType>

@if (ShouldShowFilter)
{
    <div class="sdg-filter">
        <div class="sdg-filter-container">
            <h2>Filter by @HeadingName</h2>
            <div class="sdg-filter-inputs">
                @if (IncludeTime)
                {
                    <input type="datetime-local" 
                           min="@(Min.HasValue ? @Min.Value.ToString("yyyy-MM-ddTHH:mm") : "")" 
                           max="@(Max.HasValue ? @Max.Value.ToString("yyyy-MM-ddTHH:mm") : "")" 
                           @bind-value="Value" 
                           placeholder="@HeadingName"/>
                }
                else
                {
                    <input type="date" 
                           min="@(Min.HasValue ? @Min.Value.ToString("yyyy-MM-dd") : "")" 
                           max="@(Max.HasValue ? @Max.Value.ToString("yyyy-MM-dd") : "")" 
                           @bind-value="Value" 
                           placeholder="@HeadingName"/>
                }
            </div>
            <div class="sdg-filter-buttons">
                <div class="clear">
                    <button @onclick="Clear">Clear</button>
                </div>
                <div class="apply">
                    <button @onclick="Apply">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    /// <summary>
    /// If set, the filter will be enabled when the table loads with this value as the filter value
    /// </summary>
    [Parameter]
    public DateTime? DefaultValue { get; set; }

    /// <summary>
    /// Sets the 'min' value on the inputs
    /// </summary>
    [Parameter]
    public DateTime? Min { get; set; }

    /// <summary>
    /// Sets the 'max' value on the inputs
    /// </summary>
    [Parameter]
    public DateTime? Max { get; set; }

    /// <summary>
    /// Determines if the time should be included when applying the filter
    /// </summary>
    [Parameter]
    public bool IncludeTime { get; set; }

    public DateTime? Value { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!PropertyType.IsDateType())
            throw new SimpleGridException($"Cannot apply date filter to property '{typeof(TType)}.{PropertyName}' as is not a DateTime/DateOnly"); 
        
        if ((Nullable.GetUnderlyingType(PropertyType) ?? PropertyType) == typeof(DateOnly))
            IncludeTime = false;
        
        if (DefaultValue != null)
        {
            Value = DefaultValue;
            DefaultValue = null;

            await Apply();
        }

        await base.OnInitializedAsync();
    }
}