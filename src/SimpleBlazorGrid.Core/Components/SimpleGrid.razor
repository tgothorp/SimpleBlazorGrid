@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using SimpleBlazorGrid.Configuration
@using SimpleBlazorGrid.DataSource
@using SimpleBlazorGrid.Extensions
@using SimpleBlazorGrid.Filters
@using SimpleBlazorGrid.Helpers
@using SimpleBlazorGrid.Options
@using SimpleBlazorGrid.Internal

@inject SimpleDataGridConfiguration Configuration

@typeparam TType

<_DataGridErrorBoundry TType="TType">
    <CascadingValue Value="this">

        @Columns

        @if (DataGridColumns.Any())
        {
            <div>
                <div class="sdg-table-heading">
                    @if (!string.IsNullOrEmpty(Title) || !string.IsNullOrEmpty(Subtitle))
                    {
                        <div class="sdg-table-title-container">
                            @if (!string.IsNullOrEmpty(Title))
                            {
                                <h1>@Title</h1>
                            }
                            @if (!string.IsNullOrEmpty(Subtitle))
                            {
                                <p>@Subtitle</p>
                            }
                        </div>
                    }

                    @if (Searchable)
                    {
                        <_DataGridSearch OnSearch="SearchTable"/>
                    }
                </div>

                <table class="sdg-table" style="--primary-colour: @Configuration.PrimaryColour; 
            --secondary-colour: @Configuration.SecondaryColour; 
            --glyph-colour: @Configuration.GlyphColour ">

                    @Filters

                    <thead>
                    <tr>
                        @if (Selectable)
                        {
                            <th class="sdg-selectable">
                                <input type="checkbox" @onchange="@(e => OnSelectAll((bool)e.Value!))" checked=@EverythingSelected/>
                            </th>
                        }

                        @foreach (var column in DataGridColumns)
                        {
                            var filterCountForColumnProperty = SimpleFilters.Count(x => x.PropertyName == column.PropertyName);
                            var simpleFilter = filterCountForColumnProperty switch
                            {
                                1 => SimpleFilters.Single(x => x.PropertyName == column.PropertyName),
                                > 1 => SimpleFilters.FirstOrDefault(x => x.PropertyName == column.PropertyName && x.ForHeading == column.Heading),
                                _ => null
                                };

                            <_DataGridHeading TType="TType"
                                              Column="column"
                                              SortAscending="SortAscending"
                                              SortOptions="SortOptions"
                                              Width="@column.Width"
                                              SimpleFilter="simpleFilter"
                                              Hidden="@column.Hidden"/>
                        }
                    </tr>
                    </thead>
                    <tbody>
                    @if (Loading)
                    {
                        <tr>
                            <td colspan="@(DataGridColumns.Count + (Selectable ? 1 : 0))">
                                <div class="sdg-loading">
                                    <h2>Loading</h2>
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        @if (Items.Any())
                        {
                            @foreach (var item in Items)
                            {
                                var selected = SelectedItems.Contains(item);
                                <_DataGridRow TType="TType" Selectable="@Selectable" Data="item" Columns="DataGridColumns" OnSelected="OnItemSelected" Selected="selected"/>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="@(DataGridColumns.Count + (Selectable ? 1 : 0))">
                                    <div class="sdg-no-data">
                                        <h2>No records!</h2>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                    <tfoot>
                    <tr>
                        <td colspan="@(Selectable ? DataGridColumns.Count + 1 : DataGridColumns.Count)">
                            <_DataGridPagingControls TType="TType" PageOptions="SimpleGridDataSource.PageOptions" PageChanged="OnPageChanged"/>
                        </td>
                    </tr>
                    </tfoot>
                </table>
            </div>
        }
    </CascadingValue>
</_DataGridErrorBoundry>

@code {

    /// <summary>
    /// Adds a <code>&lt;h1&gt;</code> element to the table that displays the provided title
    /// </summary>
    [Parameter]
    public string Title { get; set; }

    /// <summary>
    /// Adds a <code>&lt;p&gt;</code> element to the table that displays the provided subtitle
    /// </summary>
    [Parameter]
    public string Subtitle { get; set; }

    /// <summary>
    /// All columns should be wrapper in the <code>&lt;Columns&gt;</code> render fragment
    /// </summary>
    [Parameter]
    public RenderFragment Columns { get; set; }

    /// <summary>
    /// All filters should be wrapper in the <code>&lt;Filters&gt;</code> render fragment
    /// </summary>
    [Parameter]
    public RenderFragment Filters { get; set; }

    /// <summary>
    /// The ISimpleGridDataSource that will be used as the data provider for this table.
    /// </summary>
    [Parameter]
    public ISimpleGridDataSource<TType> SimpleGridDataSource { get; set; }

    /// <summary>
    /// How many individual rows will be displayed per page (default: 15)
    /// </summary>
    [Parameter]
    public int ItemsPerPage { get; set; } = 15;

    /// <summary>
    /// Allows each individual row to be selectable if set (default: false) 
    /// </summary>
    [Parameter]
    public bool Selectable { get; set; }

    /// <summary>
    /// Enables the search box that allows for table-wide searching
    /// </summary>
    /// <remarks>
    /// Individual columns will need to be marked as searchable, see the documentation for more info 
    /// </remarks>
    [Parameter]
    public bool Searchable { get; set; }

    ///<summary>
    /// Callback fired whenever a new row is selected or deselected, will contain a list of all selected rows 
    /// </summary>
    /// <remarks>
    /// Selected items could be empty in the event the user selected and then deselected a row. Requires the <code>Selectable</code> parameter to be true
    /// </remarks>
    [Parameter]
    public EventCallback<List<TType>> OnSelectionChanged { get; set; }

    // Table Data
    public List<SimpleColumn<TType>> DataGridColumns { get; set; } = new();
    private TType[] Items { get; set; } = { };
    private List<Filter<TType>> SimpleFilters { get; set; } = new();

    // Filtering etc
    public PageOptions PageOptions { get; set; } = new();
    public SortOptions SortOptions { get; set; } = new();
    public SearchOptions SearchOptions { get; set; } = new();
    private List<Filter<TType>> AllSimpleFilters { get; set; }
    private List<Filter<TType>> ActiveSimpleFilters { get; set; } = new();
    private Filter<TType> ActiveSimpleFilter { get; set; } = null;

    // UI & internal junk
    private List<TType> SelectedItems { get; set; } = new();
    private bool SortAscending { get; set; } = true;
    private bool EverythingSelected { get; set; } = false;

    private bool Loading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        PageOptions.ItemsPerPage = ItemsPerPage;
        await ReloadData();

        await base.OnParametersSetAsync();
    }

    public Task AddColumn(SimpleColumn<TType> column)
    {
        DataGridColumns.Add(column);

        if (column.Searchable)
        {
            Searchable = true;
            SearchOptions.Columns.Add(column.PropertyName);
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task Sort(string property, bool sortAscending)
    {
        SortOptions.Property = property;
        SortOptions.Ascending = sortAscending;
        SortAscending = !SortAscending;

        // Go back to the first page when sorting
        PageOptions.CurrentPage = 0;

        SelectedItems = new List<TType>();
        EverythingSelected = false;

        await OnSelectionChanged.InvokeAsync(SelectedItems);
        await ReloadData();
    }

    private async Task OnPageChanged(int newPage)
    {
        PageOptions.CurrentPage = newPage;

        SelectedItems = new List<TType>();
        EverythingSelected = false;
        await OnSelectionChanged.InvokeAsync(SelectedItems);
        await ReloadData();
    }

    private void OnSelectAll(bool selectAll)
    {
        SelectedItems = selectAll
            ? Items.ToList()
            : new List<TType>();

        if (SelectedItems.Any())
            EverythingSelected = true;

        OnSelectionChanged.InvokeAsync(SelectedItems);
    }

    private void OnItemSelected(TType item)
    {
        if (SelectedItems.Contains(item))
            SelectedItems.Remove(item);
        else
            SelectedItems.Add(item);

        OnSelectionChanged.InvokeAsync(SelectedItems);
    }

    public Task AddSimpleFilter(Filter<TType> filter)
    {
        if (SimpleFilters.All(x => x.Id != filter.Id))
            SimpleFilters.Add(filter);

        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task EditSimpleFilter(Filter<TType> filter)
    {
        var editableFilter = SimpleFilters.Single(x => x.Id == filter.Id);
        editableFilter.ShowFilter(true);

        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task ReloadData()
    {
        Loading = true;
        StateHasChanged();

        SimpleGridDataSource.SortOptions = SortOptions;
        SimpleGridDataSource.PageOptions = PageOptions;
        SimpleGridDataSource.SearchOptions = SearchOptions;

        SimpleGridDataSource.Filters = SimpleFilters
            .Where(x => x.FilterActive);

        Items = await SimpleGridDataSource.Items();

        Loading = false;
        StateHasChanged();
    }

    private async Task SearchTable(string query)
    {
        if (SearchOptions.Query == query)
            return;

        // Go back to the first page when sorting
        PageOptions.CurrentPage = 0;
        SearchOptions.Query = query;

        await ReloadData();
    }
}