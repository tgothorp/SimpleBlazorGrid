@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using SimpleBlazorGrid.Configuration
@using SimpleBlazorGrid.DataSource
@using SimpleBlazorGrid.Filters
@using SimpleBlazorGrid.Helpers
@using SimpleBlazorGrid.Options
@using SimpleBlazorGrid.Internal

@inject SimpleDataGridConfiguration Configuration

@typeparam TType

<CascadingValue Value="this">

    @Columns

    @if (DataGridColumns.Any())
    {
        <div>
            @if (!string.IsNullOrEmpty(Title) || !string.IsNullOrEmpty(Subtitle))
            {
                <div class="sdg-table-title-container">
                    @if (!string.IsNullOrEmpty(Title))
                    {
                        <h1>@Title</h1>
                    }
                    @if (!string.IsNullOrEmpty(Subtitle))
                    {
                        <p>@Subtitle</p>
                    }
                </div>
            }

            <table class="sdg-table" style="--primary-colour: @Configuration.PrimaryColour; --secondary-colour: @Configuration.SecondaryColour">

                @Filters

                <thead>
                <tr>
                    @if (Selectable)
                    {
                        <th class="sdg-selectable">
                            <input type="checkbox" @onchange="@(e => OnSelectAll((bool)e.Value!))" checked=@EverythingSelected/>
                        </th>
                    }

                    @foreach (var column in DataGridColumns)
                    {
                        var simpleFilter = SimpleFilters.SingleOrDefault(x => x.PropertyName == column.PropertyName);
                        
                        <_DataGridHeading TType="TType" 
                              Column="column"
                              SortAscending="SortAscending" 
                              SortOptions="SortOptions"
                              Width="@column.Width"
                              SimpleFilter="simpleFilter" />
                    }
                </tr>
                </thead>
                <tbody>
                @if (Loading)
                {
                    <tr>
                        <td colspan="@(DataGridColumns.Count + (Selectable ? 1 : 0))">
                            <div class="sdg-loading">
                                <h2>Loading</h2>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    @if (Items.Any())
                    {
                        @foreach (var item in Items)
                        {
                            var selected = SelectedItems.Contains(item);
                            <_DataGridRow TType="TType" Selectable="@Selectable" Data="item" Columns="DataGridColumns" OnSelected="OnItemSelected" Selected="selected"/>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="@(DataGridColumns.Count + (Selectable ? 1 : 0))">
                                <div class="sdg-no-data">
                                    <h2>No records!</h2>
                                </div>
                            </td>
                        </tr>
                    }
                }
                </tbody>
                <tfoot>
                <tr>
                    <td colspan="@(Selectable ? DataGridColumns.Count + 1 : DataGridColumns.Count)">
                        <_DataGridPagingControls TType="TType" PageOptions="SimpleGridDataSource.PageOptions" PageChanged="OnPageChanged"/>
                    </td>
                </tr>
                </tfoot>
            </table>
        </div>
    }
</CascadingValue>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Subtitle { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public ISimpleGridDataSource<TType> SimpleGridDataSource { get; set; }

    [Parameter]
    public int ItemsPerPage { get; set; } = 5;

    [Parameter]
    public bool Selectable { get; set; }

    [Parameter]
    public EventCallback<List<TType>> OnSelectionChanged { get; set; }

    // Table Data
    private TType[] Items { get; set; } = { };
    private List<SimpleColumn<TType>> DataGridColumns { get; set; } = new();
    private List<Filter<TType>> SimpleFilters { get; set; } = new();

    // Filtering etc
    public PageOptions PageOptions { get; set; } = new();
    public SortOptions SortOptions { get; set; } = new();
    private List<Filter<TType>> AllSimpleFilters { get; set; }
    private List<Filter<TType>> ActiveSimpleFilters { get; set; } = new();
    private Filter<TType> ActiveSimpleFilter { get; set; } = null;

    // UI & internal junk
    private List<TType> SelectedItems { get; set; } = new();
    private bool SortAscending { get; set; } = true;
    private bool EverythingSelected { get; set; } = false;

    private bool Loading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        PageOptions.ItemsPerPage = ItemsPerPage;
        await ReloadData();
        
        await base.OnParametersSetAsync();
    }

    public Task AddColumn(SimpleColumn<TType> column)
    {
        DataGridColumns.Add(column);
        StateHasChanged();
        
        return Task.CompletedTask;
    }

    public async Task Sort(string property, bool sortAscending)
    {
        SortOptions.Property = property;
        SortOptions.Ascending = sortAscending;
        SortAscending = !SortAscending;

        // Go back to the first page when sorting
        PageOptions.CurrentPage = 0;

        SelectedItems = new List<TType>();
        EverythingSelected = false;
        
        await OnSelectionChanged.InvokeAsync(SelectedItems);
        await ReloadData();
    }

    private async Task OnPageChanged(int newPage)
    {
        PageOptions.CurrentPage = newPage;

        SelectedItems = new List<TType>();
        EverythingSelected = false;
        await OnSelectionChanged.InvokeAsync(SelectedItems);
        await ReloadData();
    }

    private void OnSelectAll(bool selectAll)
    {
        SelectedItems = selectAll
            ? Items.ToList()
            : new List<TType>();

        if (SelectedItems.Any())
            EverythingSelected = true;

        OnSelectionChanged.InvokeAsync(SelectedItems);
    }

    private void OnItemSelected(TType item)
    {
        if (SelectedItems.Contains(item))
            SelectedItems.Remove(item);
        else
            SelectedItems.Add(item);

        OnSelectionChanged.InvokeAsync(SelectedItems);
    }

    public Task AddSimpleFilter(Filter<TType> filter)
    {
        if (SimpleFilters.All(x => x.PropertyName != filter.PropertyName))
            SimpleFilters.Add(filter);

        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task EditSimpleFilter(Filter<TType> filter)
    {
        var editableFilter = SimpleFilters.Single(x => x.Id == filter.Id);
        editableFilter.ShowFilter(true);
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task ReloadData()
    {
        Loading = true;
        StateHasChanged();
        
        SimpleGridDataSource.SortOptions = SortOptions;
        SimpleGridDataSource.PageOptions = PageOptions;
        
        SimpleGridDataSource.Filters = SimpleFilters
            .Where(x => x.FilterActive);

        Items = await SimpleGridDataSource.Items();

        Loading = false;
        StateHasChanged();
    }
}