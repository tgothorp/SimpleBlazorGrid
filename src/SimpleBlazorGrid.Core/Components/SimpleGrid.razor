@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using SimpleBlazorGrid.Configuration
@using SimpleBlazorGrid.DataSource
@using SimpleBlazorGrid.Extensions
@using SimpleBlazorGrid.Filters
@using SimpleBlazorGrid.Helpers
@using SimpleBlazorGrid.Internal

@inject SimpleDataGridConfiguration Configuration

@typeparam TType

<_DataGridErrorBoundry TType="TType">
    <CascadingValue Value="this">

            <div>
                <div class="sdg-table-heading">
                    @if (!string.IsNullOrEmpty(Title) || !string.IsNullOrEmpty(Subtitle))
                    {
                        <div class="sdg-table-title-container">
                            @if (!string.IsNullOrEmpty(Title))
                            {
                                <h1>@Title</h1>
                            }
                            @if (!string.IsNullOrEmpty(Subtitle))
                            {
                                <p>@Subtitle</p>
                            }
                        </div>
                    }

                    @if (Searchable)
                    {
                        <_DataGridSearch TType="TType"/>
                    }
                </div>

                <table class="sdg-table" style="--primary-colour: @Configuration.PrimaryColour; 
            --secondary-colour: @Configuration.SecondaryColour; 
            --glyph-colour: @Configuration.GlyphColour ">

                    @Filters

                    <thead>
                    <tr>
                        @if (Selectable)
                        {
                            <th class="sdg-selectable">
                                <input type="checkbox" @onchange="@(e => OnSelectAll((bool)e.Value!))" checked=@EverythingSelected/>
                            </th>
                        }
                        
                        @Columns

                    </tr>
                    </thead>
                    
                    @if (DataGridColumns.Any())
                    {
                        <tbody>
                        @if (Loading)
                        {
                            <tr>
                                <td colspan="@(DataGridColumns.Count + (Selectable ? 1 : 0))">
                                    <div class="sdg-loading">
                                        <h2>Loading</h2>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @if (TableState.Items.Any())
                            {
                                @foreach (var item in TableState.Items)
                                {
                                    <_DataGridRow TType="TType" Data="item"/>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="@(DataGridColumns.Count + (Selectable ? 1 : 0))">
                                        <div class="sdg-no-data">
                                            <h2>No records!</h2>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                        <tfoot>
                        <tr>
                            <td colspan="@(Selectable ? DataGridColumns.Count + 1 : DataGridColumns.Count)">
                                <_DataGridPagingControls TType="TType"/>
                            </td>
                        </tr>
                        </tfoot>
                    }
                </table>
            </div>
    </CascadingValue>
</_DataGridErrorBoundry>

@code {

    /// <summary>
    /// Adds a <code>&lt;h1&gt;</code> element to the table that displays the provided title
    /// </summary>
    [Parameter]
    public string Title { get; set; }

    /// <summary>
    /// Adds a <code>&lt;p&gt;</code> element to the table that displays the provided subtitle
    /// </summary>
    [Parameter]
    public string Subtitle { get; set; }

    /// <summary>
    /// All columns should be wrapper in the <code>&lt;Columns&gt;</code> render fragment
    /// </summary>
    [Parameter]
    public RenderFragment Columns { get; set; }

    /// <summary>
    /// All filters should be wrapper in the <code>&lt;Filters&gt;</code> render fragment
    /// </summary>
    [Parameter]
    public RenderFragment Filters { get; set; }

    /// <summary>
    /// The ISimpleGridDataSource that will be used as the data provider for this table.
    /// </summary>
    [Parameter]
    public ISimpleGridDataSource<TType> SimpleGridDataSource { get; set; }

    /// <summary>
    /// How many individual rows will be displayed per page (default: 15)
    /// </summary>
    [Parameter]
    public int ItemsPerPage { get; set; } = 15;

    /// <summary>
    /// Allows each individual row to be selectable if set (default: false) 
    /// </summary>
    [Parameter]
    public bool Selectable { get; set; }

    /// <summary>
    /// Enables the search box that allows for table-wide searching
    /// </summary>
    /// <remarks>
    /// Individual columns will need to be marked as searchable, see the documentation for more info 
    /// </remarks>
    [Parameter]
    public bool Searchable { get; set; }

    /// <summary>
    /// Callback fired whenever a new row is selected or deselected, will contain a list of all selected rows 
    /// </summary>
    /// <remarks>
    /// Selected items could be empty in the event the user selected and then deselected a row. Requires the <code>Selectable</code> parameter to be true
    /// </remarks>
    [Parameter]
    public EventCallback<List<TType>> OnSelectionChanged { get; set; }

    internal TableState<TType> TableState;
    internal List<SimpleColumn<TType>> DataGridColumns { get; set; } = new();
    internal List<Filter<TType>> SimpleFilters { get; set; } = new();

    // UI & internal junk
    private bool EverythingSelected { get; set; } = false;
    private bool Loading { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        TableState ??= new TableState<TType>(ItemsPerPage);

        await ReloadData();
        await base.OnParametersSetAsync();
    }

    public Task AddColumn(SimpleColumn<TType> column)
    {
        DataGridColumns.Add(column);

        if (column.Searchable)
            TableState.AddSearchableColumn(column.PropertyName);
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnSelectAll(bool selectAll)
    {
        if (selectAll)
            TableState.SelectEverything();
        else
            TableState.SelectNothing();
        
        if (TableState.SelectedItems.Any())
            EverythingSelected = true;

        OnSelectionChanged.InvokeAsync(TableState.SelectedItems);
        StateHasChanged();
    }

    public Task AddSimpleFilter(Filter<TType> filter)
    {
        if (SimpleFilters.All(x => x.Id != filter.Id))
            SimpleFilters.Add(filter);

        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task EditSimpleFilter(Filter<TType> filter)
    {
        var editableFilter = SimpleFilters.Single(x => x.Id == filter.Id);
        editableFilter.ShowFilter(true);

        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task ReloadData()
    {
        Loading = true;
        StateHasChanged();

        await SimpleGridDataSource.LoadItems(ref TableState);

        Loading = false;
        StateHasChanged();
    }
}