@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@using System.Linq.Expressions
@using System.Text
@using SimpleBlazorGrid.Filters
@using SimpleBlazorGrid.Formatting
@using SimpleBlazorGrid.Helpers
@using SimpleBlazorGrid.Internal

@typeparam TType

<th style="@(ColumnWidth())">
    <div class="sdg-heading-container @(Hidden ? "sdg-heading-container-hidden" : "")">

        @if (Filter is not null)
        {
            <div class="sdg-heading-filter" @onclick="ShowSimpleFilter">
                <_DataGridFilterGlyph Active="Filter.FilterActive"/>
            </div>
        }

        <div class="sdg-heading-text" @onclick="Sort">
            <span>@ColumnHeading()</span>
        </div>
    </div>
</th>


@code {

    [CascadingParameter]
    public SimpleGrid<TType> SimpleGrid { get; set; }

    [Parameter]
    public Expression<Func<TType, object>> For { get; set; }

    // Cache property name
    private string _propertyName = null;

    public string PropertyName
    {
        get => _propertyName ?? GetPropertyName();
        set => _propertyName = value;
    }

    [Parameter]
    public string Heading { get; set; }

    [Parameter]
    public Format Format { get; set; } = Format.None;

    [Parameter]
    public RenderFragment<TType> SimpleColumnTemplate { get; set; }

    [Parameter]
    public bool Sortable { get; set; }

    [Parameter]
    public bool Searchable { get; set; }

    [Parameter]
    public int? Width { get; set; }

    [Parameter]
    public bool Hidden { get; set; }

    private Filter<TType> Filter { get; set; }

    protected override void OnInitialized()
    {
        SimpleGrid.AddColumn(this);
        Filter ??= GetFilter();

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Heading ??= PropertyName;

        if (Hidden)
            Width = 0;

        base.OnParametersSet();
    }

    private string GetPropertyName()
    {
        _propertyName = ExpressionHelper.GetPropertyName(For);
        return _propertyName;
    }
    
    private string ColumnWidth()
    {
        return Width == null ? null : $"width: {Width}%";
    }

    private Filter<TType> GetFilter()
    {
        var filterCountForColumnProperty = SimpleGrid.SimpleFilters.Count(x => x.PropertyName == PropertyName);
        return filterCountForColumnProperty switch
        {
            1 => SimpleGrid.SimpleFilters.Single(x => x.PropertyName == PropertyName),
            > 1 => SimpleGrid.SimpleFilters.FirstOrDefault(x => x.PropertyName == PropertyName && x.ForHeading == Heading),
            _ => null
        };
    }
    
    private MarkupString ColumnHeading()
    {
        var sb = new StringBuilder();
        sb.Append(Heading);
        
        switch (Sortable)
        {
            case true when SimpleGrid.TableState.SortProperty == PropertyName:
                sb.Append(SimpleGrid.TableState.SortAscending ? "&nbsp;тее" : "&nbsp;тег");
                break;
            case true:
                sb.Append("&nbsp;теп");
                break;
        }

        return new MarkupString(sb.ToString());
    }
    
    private void ShowSimpleFilter()
    {
        SimpleGrid.EditSimpleFilter(Filter);
    }
    
    private async Task Sort()
    {
        SimpleGrid.TableState.UpdateSortProperty(PropertyName);
        await SimpleGrid.ReloadData();
    }
}