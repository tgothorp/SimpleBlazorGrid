@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid.Internal

@using SimpleBlazorGrid.Interfaces
@using SimpleBlazorGrid.Internal.Filters
@using SimpleBlazorGrid.Options.Filters

@typeparam TType

<div style="width: 100%; height: 100%">
    @switch (Filter)
    {
        case SimpleFilter<TType> {FilterOption: StringEqualFilterOption } stringEqualFilter:
            <_DataGridSimpleTextFilter
                TType="TType"
                Filter="@((StringEqualFilterOption)stringEqualFilter.FilterOption)"
                OnFilterChanged="ApplyFilter"
                OnFilterRemoved="RemoveFilter"/>
            break;
        case SimpleFilter<TType> {FilterOption: NumberEqualFilterOption} numberEqualFilter:
            <_DataGridSimpleNumberFilter
                TType="TType"
                Filter="@((NumberEqualFilterOption)numberEqualFilter.FilterOption)"
                OnFilterChanged="ApplyFilter"
                OnFilterRemoved="RemoveFilter"/>
            break;
        case SimpleFilter<TType> {FilterOption: DateTimeEqualFilterOption} dateTimeEqualFilter:
            <_DataGridSimpleDateFilter
                TType="TType"
                Filter="@((DateTimeEqualFilterOption)dateTimeEqualFilter.FilterOption)"
                OnFilterChanged="ApplyFilter"
                OnFilterRemoved="RemoveFilter"/>
            break;
        case SimpleRangeFilter<TType> {FilterOption: NumberRangeFilterOption} numberRangeFilter:
            <_DataGridRangeNumberFilter
                TType="TType"
                Filter="@((NumberRangeFilterOption)numberRangeFilter.FilterOption)"
                OnFilterChanged="ApplyFilter"
                OnFilterRemoved="RemoveFilter"/>
            break;
    }
</div>

@code {

    [Parameter]
    public IFilter<TType> Filter { get; set; }

    [Parameter]
    public EventCallback<FilterOption> ApplyFilter { get; set; }

    [Parameter]
    public EventCallback<FilterOption> RemoveFilter { get; set; }

}