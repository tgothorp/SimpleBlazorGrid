@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid.Internal

@using SimpleBlazorGrid.Interfaces
@using SimpleBlazorGrid.Options

@typeparam TType

@* TODO - Tidy up CSS classes *@
<th style="@(ColumnWidth())">
    <div style="display: flex; flex-direction: row; justify-content: space-evenly;">

        @if (Filter is not null)
        {
            <div style="width: 20px; position: relative; aspect-ratio: 1; cursor: pointer" @onclick="@(async () => await ShowFilter.InvokeAsync(Filter))">
                <_DataGridFilterGlyph Active="Filter.Active"/>
            </div>
        }

        <div style="flex-grow: 4; padding-left: 5px">
            @Column.Heading
        </div>

        @if (Column.Sortable)
        {
            <div style="width: 20px; position: relative; aspect-ratio: 1; cursor: pointer" @onclick="Sort">
                <_DataGridSortGlyph Ascending="SortAscending" Active="@(Column.PropertyName == SortOptions.Property)"/>
            </div>
        }
    </div>
</th>

@code {

    [CascadingParameter]
    public IDataGrid<TType> SimpleGrid { get; set; }

    [Parameter]
    public IColumn<TType> Column { get; set; }

    [Parameter]
    public SortOptions SortOptions { get; set; }

    [Parameter]
    public bool SortAscending { get; set; }

    [Parameter]
    public IFilter<TType> Filter { get; set; }

    [Parameter]
    public EventCallback<IFilter<TType>> ShowFilter { get; set; }

    [Parameter]
    public int? Width { get; set; }

    private void Sort()
    {
        if (!Column.Sortable)
            return;

        SimpleGrid.Sort(Column.PropertyName, SortAscending);
    }

    private int CalculateHeadingWidth()
    {
        if (Filter is not null && Column.Sortable)
            return 70;

        if (Filter is not null || Column.Sortable)
            return 85;

        return 100;
    }

    private string ColumnWidth()
    {
        return Width == null ? null : $"width: {Width}%";
    }
}