@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid.Internal

@using SimpleBlazorGrid.Helpers
@using System.Linq.Expressions
@using SimpleBlazorGrid.Formatting

@inject SimpleDataGridFormatter SimpleDataGridFormatter

@typeparam TType

<tr class="@(SimpleGrid.TableState.IsSelected(Data) ? "sdg-selectable-selected" : "")">

    @if (SimpleGrid.Selectable)
    {
        <td class="sdg-selectable">
            @if (SimpleGrid.TableState.IsSelected(Data))
            {
                <input type="checkbox" checked="checked" @onclick="ItemSelected"/>
            }
            else
            {
                <input type="checkbox" @onclick="ItemSelected"/>
            }
        </td>
    }

    @foreach (var column in SimpleGrid.DataGridColumns)
    {
        <td class="@(column.Hidden ? "hidden" : "")">
            @if (column.SimpleColumnTemplate is not null)
            {
                @column.SimpleColumnTemplate(Data)
            }
            else
            {
                @GetRowDataForColumn(column)
            }
        </td>
    }
</tr>

@code {

    [CascadingParameter]
    public SimpleGrid<TType> SimpleGrid { get; set; }

    [Parameter]
    public TType Data { get; set; }

    private string GetRowDataForColumn(SimpleColumn<TType> column)
    {
        try
        {
            var obj = column.For.Compile().Invoke(Data);
            return SimpleDataGridFormatter.FormatProperty(obj, column.Format);
        }
        catch (NullReferenceException)
        {
            return "null";
        }
    }

    private void ItemSelected()
    {
        if (SimpleGrid.TableState.SelectedItems.Contains(Data))
        {
            SimpleGrid.TableState.Deselect(Data);
        }
        else
        {
            SimpleGrid.TableState.Select(Data);
        }

        SimpleGrid.OnSelectionChanged.InvokeAsync(SimpleGrid.TableState.SelectedItems);
        StateHasChanged();
    }
}