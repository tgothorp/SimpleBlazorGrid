@* ReSharper disable once CheckNamespace *@
@namespace SimpleBlazorGrid

@typeparam TType

@using SimpleBlazorGrid.Enums
@using SimpleBlazorGrid.Extensions
@using SimpleBlazorGrid.Interfaces
@using SimpleBlazorGrid.Options.Filters

@implements SimpleBlazorGrid.Interfaces.IFilter<TType>

@code {
    [CascadingParameter]
    public IDataGrid<TType> DataGrid { get; set; }
    
    [Parameter]
    public string Property { get; set; }

    [Parameter]
    public string Min { get; set; }

    [Parameter]
    public string Max { get; set; }

    [Parameter]
    public string Step { get; set; }

    public Guid Id { get; private set; }
    public FilterOption FilterOption { get; private set; }
    public bool Active { get; private set; }

    protected override void OnInitialized()
    {
        Id = Guid.NewGuid();

        GetPropertyType();
        DataGrid.AddFilter(this);

        base.OnInitialized();
    }

    public void SetActive(bool isActive)
    {
        Active = isActive;
    }

    private void GetPropertyType()
    {
        // TODO, validate min max etc.
        
        var propertyInfo = typeof(TType).GetProperty(Property);
        var typeCode = Type.GetTypeCode(propertyInfo.PropertyType);

        switch (typeCode)
        {
            case TypeCode.Boolean:
                // TODO
                break;
            case TypeCode.Int16:
            case TypeCode.UInt16:
            case TypeCode.Int32:
            case TypeCode.UInt32:
            case TypeCode.Int64:
            case TypeCode.UInt64:
            case TypeCode.Single:
            case TypeCode.Double:
            case TypeCode.Decimal:
                FilterOption = new NumberEqualFilterOption(Id, Property, Min, Max, Step);
                break;
            case TypeCode.DateTime:
                FilterOption = new DateTimeEqualFilterOption(Id, Property);
                break;
            default: // Assume string if other
                FilterOption = new StringEqualFilterOption(Id, Property);
                break;
        }
    }
}